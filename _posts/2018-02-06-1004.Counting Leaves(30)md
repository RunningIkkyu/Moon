---
layout: post
title:  "1003. Emergency(25)"
date:   2018-02-05
excerpt: "A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child."
tag:
- PAT 
- OJ
- Tree
comments: true
---
# 1004. Counting Leaves (30)
A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.
## Input

Each input file contains one test case. Each case starts with a line containing 0 < N < 100, the number of nodes in a tree, and M (< N), the number of non-leaf nodes. Then M lines follow, each in the format:  
```
ID K ID[1] ID[2] ... ID[K]
```
where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID's of its children. For the sake of simplicity, let us fix the root ID to be 01.  
## Output

For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.  
  
The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output "0 1" in a line.  
  
##  Sample Input
```
2 1
01 1 02
```
## Sample Output
```
0 1
```

## Analysis
This is a simple tree tranversal problem, still, it can be solved by many ways, like bfs, dfs and level order tree tranversal. In this post, we use a recursion function to solved the problem.  

From the form of input above, it's obviously that every non-leaf node has been given, so that we can get every leaf node. May be you've also noticed the information we need to solve this problem are the number of leaf node in each level. We don't care all the children of some node, so every node just need a point to their parents. Let's see an example:  
  
![img](https://raw.githubusercontent.com/RunningIkkyu/runningikkyu.github.com/master/assets/img/PAT/1004-tree.jpg)
  
We set an array called tree, tree[i] indicates node-i's parents, just like pointer.The array's content:
![img](https://raw.githubusercontent.com/RunningIkkyu/runningikkyu.github.com/master/assets/img/PAT/1004-array.jpg)
  
For each node, we don't know their depth(level), but we do know their depth is equal to their parent's depth add one. until the root, we know the level of the root is fisrt, so we can know the current leaf-node's depth by recursion.  

## 
